// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcerrors

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCErrorsClient is the client API for GRPCErrors service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCErrorsClient interface {
	// simple RPC, takes a message and responds with a message
	SimpleRPC(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error)
	// streaming response, takes a message and responds with a stream
	StreamResponse(ctx context.Context, in *Data, opts ...grpc.CallOption) (GRPCErrors_StreamResponseClient, error)
	// streaming request, takes streaming input and responds with a message
	StreamRequest(ctx context.Context, opts ...grpc.CallOption) (GRPCErrors_StreamRequestClient, error)
	// streaming request and response
	StreamRequestResponse(ctx context.Context, opts ...grpc.CallOption) (GRPCErrors_StreamRequestResponseClient, error)
}

type gRPCErrorsClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCErrorsClient(cc grpc.ClientConnInterface) GRPCErrorsClient {
	return &gRPCErrorsClient{cc}
}

func (c *gRPCErrorsClient) SimpleRPC(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/grpcerrors.GRPCErrors/SimpleRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCErrorsClient) StreamResponse(ctx context.Context, in *Data, opts ...grpc.CallOption) (GRPCErrors_StreamResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCErrors_ServiceDesc.Streams[0], "/grpcerrors.GRPCErrors/StreamResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCErrorsStreamResponseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCErrors_StreamResponseClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type gRPCErrorsStreamResponseClient struct {
	grpc.ClientStream
}

func (x *gRPCErrorsStreamResponseClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCErrorsClient) StreamRequest(ctx context.Context, opts ...grpc.CallOption) (GRPCErrors_StreamRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCErrors_ServiceDesc.Streams[1], "/grpcerrors.GRPCErrors/StreamRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCErrorsStreamRequestClient{stream}
	return x, nil
}

type GRPCErrors_StreamRequestClient interface {
	Send(*Data) error
	CloseAndRecv() (*Data, error)
	grpc.ClientStream
}

type gRPCErrorsStreamRequestClient struct {
	grpc.ClientStream
}

func (x *gRPCErrorsStreamRequestClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCErrorsStreamRequestClient) CloseAndRecv() (*Data, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCErrorsClient) StreamRequestResponse(ctx context.Context, opts ...grpc.CallOption) (GRPCErrors_StreamRequestResponseClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCErrors_ServiceDesc.Streams[2], "/grpcerrors.GRPCErrors/StreamRequestResponse", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCErrorsStreamRequestResponseClient{stream}
	return x, nil
}

type GRPCErrors_StreamRequestResponseClient interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ClientStream
}

type gRPCErrorsStreamRequestResponseClient struct {
	grpc.ClientStream
}

func (x *gRPCErrorsStreamRequestResponseClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCErrorsStreamRequestResponseClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCErrorsServer is the server API for GRPCErrors service.
// All implementations must embed UnimplementedGRPCErrorsServer
// for forward compatibility
type GRPCErrorsServer interface {
	// simple RPC, takes a message and responds with a message
	SimpleRPC(context.Context, *Data) (*Data, error)
	// streaming response, takes a message and responds with a stream
	StreamResponse(*Data, GRPCErrors_StreamResponseServer) error
	// streaming request, takes streaming input and responds with a message
	StreamRequest(GRPCErrors_StreamRequestServer) error
	// streaming request and response
	StreamRequestResponse(GRPCErrors_StreamRequestResponseServer) error
	mustEmbedUnimplementedGRPCErrorsServer()
}

// UnimplementedGRPCErrorsServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCErrorsServer struct {
}

func (UnimplementedGRPCErrorsServer) SimpleRPC(context.Context, *Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRPC not implemented")
}
func (UnimplementedGRPCErrorsServer) StreamResponse(*Data, GRPCErrors_StreamResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamResponse not implemented")
}
func (UnimplementedGRPCErrorsServer) StreamRequest(GRPCErrors_StreamRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequest not implemented")
}
func (UnimplementedGRPCErrorsServer) StreamRequestResponse(GRPCErrors_StreamRequestResponseServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamRequestResponse not implemented")
}
func (UnimplementedGRPCErrorsServer) mustEmbedUnimplementedGRPCErrorsServer() {}

// UnsafeGRPCErrorsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCErrorsServer will
// result in compilation errors.
type UnsafeGRPCErrorsServer interface {
	mustEmbedUnimplementedGRPCErrorsServer()
}

func RegisterGRPCErrorsServer(s grpc.ServiceRegistrar, srv GRPCErrorsServer) {
	s.RegisterService(&GRPCErrors_ServiceDesc, srv)
}

func _GRPCErrors_SimpleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCErrorsServer).SimpleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcerrors.GRPCErrors/SimpleRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCErrorsServer).SimpleRPC(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCErrors_StreamResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Data)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCErrorsServer).StreamResponse(m, &gRPCErrorsStreamResponseServer{stream})
}

type GRPCErrors_StreamResponseServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type gRPCErrorsStreamResponseServer struct {
	grpc.ServerStream
}

func (x *gRPCErrorsStreamResponseServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCErrors_StreamRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCErrorsServer).StreamRequest(&gRPCErrorsStreamRequestServer{stream})
}

type GRPCErrors_StreamRequestServer interface {
	SendAndClose(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type gRPCErrorsStreamRequestServer struct {
	grpc.ServerStream
}

func (x *gRPCErrorsStreamRequestServer) SendAndClose(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCErrorsStreamRequestServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GRPCErrors_StreamRequestResponse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCErrorsServer).StreamRequestResponse(&gRPCErrorsStreamRequestResponseServer{stream})
}

type GRPCErrors_StreamRequestResponseServer interface {
	Send(*Data) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type gRPCErrorsStreamRequestResponseServer struct {
	grpc.ServerStream
}

func (x *gRPCErrorsStreamRequestResponseServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCErrorsStreamRequestResponseServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCErrors_ServiceDesc is the grpc.ServiceDesc for GRPCErrors service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCErrors_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcerrors.GRPCErrors",
	HandlerType: (*GRPCErrorsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRPC",
			Handler:    _GRPCErrors_SimpleRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamResponse",
			Handler:       _GRPCErrors_StreamResponse_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamRequest",
			Handler:       _GRPCErrors_StreamRequest_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamRequestResponse",
			Handler:       _GRPCErrors_StreamRequestResponse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpcerrors.proto",
}
