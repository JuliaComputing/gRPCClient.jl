syntax = "proto3";

option go_package = "juliacomputing.com/grpcerrors";

package grpcerrors;

// Interface exported by the server.
service GRPCErrors {
  // simple RPC, takes a message and responds with a message
  rpc SimpleRPC(Data) returns (Data) {}

  // streaming response, takes a message and responds with a stream
  rpc StreamResponse(Data) returns (stream Data) {}

  // streaming request, takes streaming input and responds with a message
  rpc StreamRequest(stream Data) returns (Data) {}

  // streaming request and response
  rpc StreamRequestResponse(stream Data) returns (stream Data) {}
}

// Request parameter, dictates how the simulation should behave.
// mode can take values:
// 1: throw an error after seconds provided in `param`
// 2: no error, just wait until seconds provided in `param`, respond with SimulationParams
//
// when sent in a stream as input, the server would consider only the first one in the
// stream to determine the course of action
message Data {
  int32 mode = 1;
  int32 param = 2;
}
